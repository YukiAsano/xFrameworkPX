* WiseTagコンポーネント
WiseTagコンポーネントは、配列で記述された設定に合わせて入力フォームを生成してテンプレートにアサインする、
''WiseTag''という機能を提供するビルトインコンポーネントです。
WiseTagコンポーネントは、コントローラーに「''Tag''」というバインド名で登録されています。

* WiseTagの設定を初期化する
WiseTagの機能を使うために、まず入力フォームを出力するための設定を初期化します。
ここでいう初期化とは、設定を全て消去するということではなく、WiseTagが保持する入力フォームの設定に対して、
セッションに設定が保存されていた場合はロードし、なければ空の設定をセットすることをさします。

初期化の処理を行うことで、以前生成した入力フォームと同じものを生成する場合に、入力フォームの設定を再度する必要がなくなります。

&br;

** メソッド
入力フォームの設定を初期化するには、以下のメソッドを使用します。

|~メソッド名|~戻り値|~引数|~説明|
|init|void|[string 設定名]|WiseTagの設定を初期化します。&br;引数に設定名を渡すことで、その設定名で保存されている入力フォームの設定をロードします。&br;引数は省略可。省略した場合、デフォルトの設定名((xFrameworkの実行時の設定で任意の名前に変更できます。設定していない場合の設定名は「'''WiseTagConfig'''」になります。))から設定をロードします。|


** 記述例

{{{
class example extends xFrameworkPX_Controller_Action
{
    public function execute()
    {
        // WiseTag設定初期化
        $this->Tag->init();

        // "hoge"という設定名でセッション保存されている設定を読み込む場合
        $this->Tag->init('hoge');
    }
}
}}}

* WiseTagに入力フォームの設定を追加する
WiseTagが入力フォームの生成するために必要な設定をWiseTagに追加する方法を説明します。

&br;

** メソッド
設定の追加には以下のメソッドを使用します。

|~メソッド名|~戻り値|~引数|~説明|
|add|void|array 入力フィールドの設定|引数で渡した設定をWiseTagに追加します。&br;それぞれのパラメータについては、&br;下記の項目をそれぞれ参照してください。|
|^|^|[bool 上書きフラグ]|^|

&br;

** 入力フィールドの設定
入力フィールドの設定は連想配列の形式で記述しパラメータとして指定します。
これからその連想配列の形式について説明します。

まずtypeというキーで生成するタグのタイプを指定します。
ここで設定できるタイプは以下の13種類です。
|~タイプ|~生成される入力フォームの種類|
|form|<form>タグの属性部分のみ|
|text|<input type="text" />|
|password|<input type="password" />|
|radio|<input type="radio">|
|checkbox|<input type="checkbox" />|
|file|<input type="file" />|
|select|<select></select>と<option></option>|
|textarea|<textarea></textarea>|
|hidden|<input type="hidden" />|
|submit|<input type="submit" />|
|reset|<input type="reset" />|
|button|<input type="button" />|
|image|<input type="image" />|

この項目の設定は省略することができます。省略した場合は'text'が選択されたものとして処理を行います。

&br;

以下は連想配列のキー名と設定値に関する説明の一覧です。
*** type が form のとき
|~キー名|~説明|
|action|formタグのaction属性に設定する値を指定します。|
|method|formタグのmethod属性に設定する値(post または get)を指定します。|
|enctype|formタグのenctype属性に設定する値を指定します。|

*** type が form 以外のとき
|~キー名|~説明|
|name|入力フィールドの名前を指定します。&br;ここで指定した値は出力されるタグのname属性にも設定されます。&br;この設定は必須です。|
|id|出力されるタグのid属性に設定される値を指定します。&br;「prelabel」と「label」の指定をする場合、この指定は必須です。&br;この指定がない場合ラベルは生成されません。|
|prelabel|これら二つの設定がされているフィールドでは生成されるタグに対して、&br;ここで指定した値を使って生成されたラベルが挿入されます。&br;「prelabel」と「label」ではラベルの挿入される位置が違います。&br;それぞれ「prelabel」はタグの先頭に挿入され、「label」は末尾に挿入されます。|
|label|^|
|pretext|これら二つの設定がされているフィールドはタグを生成するとき、&br;指定された値をそのまま生成したタグに挿入します。&br;「pretext」と「text」の違いは「prelabel」と「label」のときと同様、&br;「pretext」はタグの先頭に、「text」はタグの末尾にそれぞれ値を挿入します。|
|text|^|
|options|typeに'select'が設定されたときに行う設定で、&br;optionタグを生成するときに使用する設定用の配列を指定する。|
|その他|上記の設定の他に、任意のキー名の要素に対して値を設定することで、&br;設定されたフィールドのタグに対してキー名と同じ属性の設定ができます。|

このパラメータはフィールドの設定配列を複数指定した配列を渡すことで、
同時に複数のフィールドをWiseTagに追加することができます。

&br;

** 上書きフラグ
上書きフラグは追加しようとしているフィールドと同名のフィールドが存在していた場合の動作についてbool値で設定します。
上書きフラグがtrueの場合は、追加しようとしている設定で既存の設定を上書きします。
またこのフラグがfalseの場合、設定は上書きせずに追加します。
このとき追加されたフィールドは配列化され、全てのフィールドの設定を保持しています。
~
このパラメータは省略可能です。省略した場合のaddメソッドの動作は、falseを設定した場合と同じになります。

&br;

** 記述例
{{{
class example extends xFrameworkPX_Controller_Action
{
    public function execute()
    {
        // WiseTagに設定を複数追加する場合
        $this->Tag->add(
            array(

                // type='form'タグの設定
                array(
                    'type' => 'form',
                    'action' => './wisetag_sample.html',
                    'method' => 'post'
                ),

                // type='text'の設定
                array(
                    'type' => 'text',
                    'name' => 'field[txtbox]',
                    'value' => 'this is textbox example',
                    'size' => '30',
                    'maxlength' => '50'
                    'pretext' => 'テキストボックス'
                ),

                // type="select"の設定
                array(
                    'type' => 'select',
                    'name' => 'field[select]',
                    'id' => 'select1',
                    'prelabel' => 'セレクトボックス',
                    'options' => array(
                        array(

                            // value属性の設定
                            'value' => '',

                            // optionタグのinnerText設定(optionタグで囲まれる文字列の設定)
                            'intext' => '選択してください',

                            // selected属性の設定
                            'selected' => 'selected'
                        ),
                        array(
                            'value' => '1-1',
                            'intext' => '1-1'
                        ),
                        array(
                            'value' => '1-2',
                            'intext' => '1-2'
                        ),
                        array(
                            'value' => '1-3',
                            'intext' => '1-3'
                        )
                    )
                )
            ),
            true
        );

        // WiseTagに設定をひとつ追加する場合
        $this->Tag->add(
            array(
                'type' => 'submit',
                'name' => 'run',
                'id' => 'run',
                'value' => '実行',
                'onclick' => "alert('you click submit!')",
            )
        );
    }
}
}}}

nameの指定で ''[]'' を使用すると、フィールドは配列の要素として扱われます。
このとき配列は [] の前にある文字列の名前のスカラー配列になります。
また [] の中に文字列を指定することで配列は連想配列になり、
フィールドは [] の中に指定した文字列がキー名の要素として登録されます。

記述例の場合だと、設定されているテキストボックスとセレクトボックスは、
それぞれ'''field'''という名前の配列の'''textbox'''と'''select'''というキーの要素になります。

* 入力フォームの設定を編集する
WiseTagが保持している入力フォームの設定を編集する方法を説明します。

&br;

** メソッド
設定の編集には以下のメソッドを使用します。

|~メソッド名|~戻り値|~引数|~説明|
|edit|void|array 入力フィールドの設定|条件に一致するフィールドの設定を編集します。&br;条件と編集の内容はパラメータで渡します。&br;それぞれのパラメータの詳細については、&br;下記の項目をそれぞれ参照してください。|
|^|^|[array 編集対象の条件]|^|

&br;

** 入力フィールドの設定
入力フィールドのパラメータは、addメソッドのときと同様に連想配列で指定します。
ここで指定したもののうち編集対象の設定に存在している項目については上書きし、存在しない項目については対象の設定にその項目を追加します。
また、設定で''null''を指定すると、その項目の設定は無効になります。
~
設定する内容も基本的にaddメソッドと同じですが、いくつか違う点があります。

まず、編集したいフィールドの全ての設定を記述する必要はありません。
editメソッドでは、編集したい設定の項目のみを記述します。((ただし、optionsの設定については全て記述する必要があります。))
そのため、必ず設定しなければならない項目は存在しません。
また、addメソッドのように複数の編集の設定を記述することはできません。

&br;

** 編集対象の条件
編集対象の条件についても連想配列で指定します。複数の条件が指定された場合はそれら全てのAND条件になります。
editメソッドは、ここで指定した条件に一致する全てのフィールドに対して編集を行います。

以下に、編集対象の条件として指定する連想配列のキー名と設定値に関する説明の一覧を示します。
|~キー名|~説明|
|type|編集したい入力フィールドのタイプを指定します。&br;設定できる値についてはaddメソッドの項を参照してください。|
|count|対象のフィールドがスカラー配列に登録されている場合、&br;何番目のフィールドに対して編集を行うを指定します。|
|その他|上記以外の設定項目の値についても、条件として指定することができます。|

&br;

** 記述例
{{{
// WiseTagには既にaddメソッドの記述例で登録した設定と同じものが登録されています。

class example extends xFrameworkPX_Controller_Action
{
    public function execute()
    {

        // WiseTagに登録されているテキストボックスの設定を編集する
        $this->Tag->edit(
            array(
                'size' => '50',
                'maxlength' => '60'
            ),
            array(
                'type' => 'text',
                'name' => 'field[txtbox]'
            )
        );

        // セレクトボックスの設定を編集する
        $this->Tag->edit(
            array(
                'options' => array(
                    array(

                        // value属性の設定
                        'value' => '',

                        // optionタグのinnerText設定(optionタグで囲まれる文字列の設定)
                        'intext' => '選択してください',

                        /*
                         selected属性の設定
                            nullを設定することでselectedの設定が無効となり、
                            タグを出力する際に「selected="selected"」の属性が出力されなくなります。
                         */
                        'selected' => null
                    ),
                    array(
                        'value' => '1-1',
                        'intext' => '1-1'
                        'selected' => 'selected'
                    ),
                    array(
                        'value' => '1-2',
                        'intext' => '1-2'
                    ),
                    array(
                        'value' => '1-3',
                        'intext' => '1-3'
                    )
                )
            ),
            array(
                'type' => 'select',
                'name' => 'field[select]'
            )
        );
    }
}
}}}

* WiseTagの設定を削除する
WiseTagが保持している入力フォームの設定を削除する方法を説明します。

&br;

** メソッド
WiseTagの設定の削除については、以下の二つのメソッドが用意されています。

|~メソッド名|~戻り値|~引数|~説明|
|remove|void|array 削除対象の条件|WiseTagが保持している設定から、条件に一致したフィールドの設定を削除します。&br;パラメータで渡す削除対象の条件は、editメソッドの編集対象の条件とまったく同じ形式のものを指定します。|
|clear|void|[string 設定名]|WiseTagが保持している全てのフィールドの設定を削除します。&br;このメソッドは、WiseTagが保持している設定だけでなく、セッションに保存されている設定も削除します。&br;パラメータにはinitメソッドと同様、設定名を渡します。&br;セッションから削除される設定情報は、この設定名で保存されているものになります。&br;省略した場合はデフォルトの設定名になります。|

&br;

** 記述例
{{{
// WiseTagには既にaddメソッドの記述例で登録した設定と同じものが登録されています。

class example extends xFrameworkPX_Controller_Action
{
    public function execute()
    {

        // WiseTagに登録されているセレクトボックスの設定を削除する
        $this->Tag->remove(
            array(
                'type' => 'select',
                'name' => 'field[select]'
            )
        );

        // WiseTagの設定情報を全て削除する
        $this->Tag->clear();
    }
}
}}}

* 入力フォームを生成する
WiseTagに登録されている設定情報をもとに入力フォームのタグを生成する方法を説明します。

** メソッド
入力フォームの生成には、以下のメソッドを使用します。

|~メソッド名|~戻り値|~引数|~説明|
|gen|void|[string 設定名]|現在、WiseTagが保持している入力フォームの設定をもとに、&br;タグのソースコードを生成して、ビューのテンプレートにアサインします。&br;また、このとき入力フォームの設定情報をセッションに保存します。&br;パラメータには、設定情報を保存するときに使用する設定名を指定できます。&br;このメソッドも、パラメータを省略した場合はデフォルトの設定名が使用されます。|

genメソッドが、テンプレートにアサインする際のアサイン名は「''wt''」です。((このアサイン名はxFrameworkPXの設定で変更することが可能です。))

&br;

** 記述例
{{{
// WiseTagには既にaddメソッドの記述例で登録した設定と同じものが登録されています。

class example extends xFrameworkPX_Controller_Action
{
    public function execute()
    {

        // WiseTagに登録されている設定から入力フォームを生成する
        $this->Tag->gen();
    }
}
}}}

----
