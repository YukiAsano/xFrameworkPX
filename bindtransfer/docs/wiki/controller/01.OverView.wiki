* 概要
コントローラーは、xFrameworkで実行される各処理の制御を行うクラスです。
また、ユーザーはアクションごとにコントローラーのクラスを作成する必要があります。

以下にコントローラーに関する説明をしていきます。
具体的な使用方法については、次の「使用方法」に記載してあるので、そちらを参照してください。

&br;

* コントローラーの種類

|~コントローラー名|~概要|
|内部コントローラー|xFrameworkPXが内部的に生成し実行するコントローラー|
|スーパーアクションコントローラー|スーパーアクション用のアクションコントローラー|
|グローバルアクションコントローラー|グローバルアクション用のアクションコントローラー|
|アクションコントローラー|ユーザーが仮想スクリーンに設置する通常のアクション用のコントローラー|
|Ajaxコントローラー|アクションコントローラーの代わりに利用できるJavaScript用コントローラー|
|ExtDirectコントローラー|Ext JSのExt.Direct機能用のコントローラー|

* 内部コントローラー
内部コントローラーは、リクエストがあったときにディスパッチャーが直接起動するコントローラークラスです。
コントローラーの機能を拡張するコンポーネントの生成や、実行されるアクションに対応するアクションコントローラークラスの生成、
またアクションコントローラーが使用するモジュールクラスの生成など、アクションを実行させるための準備とその実行を行います。

内部コントローラーの自動生成により、コントローラーが不要なテンプレートページのみの表示などを行う場合、
ユーザーはコントローラーレスでテンプレートを用意し、表示させることができます。
また、後にコントローラーを設置することで、ビジネスロジックを付加することも可能になります。

内部コントローラーには以下の2種類があります。

|~コントローラーの種類|~概要|
|Webコントローラー|動作モードがWebモードのときに呼び出される内部コントローラー|
|Consoleコントローラー|動作モードがコンソールモードのときに呼び出される内部コントローラー|

Webサーバーを経由して実行されるコントローラーが、Webコントローラーです。
通常はこのWebコントローラーが、内部コントローラーとしてディスパッチャー内で自動的に生成され実行されます。

Webブラウザのタイムアウトする時間内で処理できないような処理、またはCronなどで定期的に実行したい場合に使用されるのが、Consoleコントローラーです。

ユーザーはこの２つのコントローラーを意識する必要はなく、ディスパッチャーが自動的に（PHP_SAPI定数を利用した自動識別）PHPの動作モードを判別し内部コントローラーを生成します。

&br;

* スーパーアクションコントローラーとグローバルアクションコントローラー
スーパーアクションコントローラーは、スーパーアクションの動作を制御するアクションコントローラークラスです。
ユーザーは、スーパーアクションとして行いたい処理を定義したアクションコントローラーを作成し、super.pxmlに設定を記述することで、
そのアクションコントローラーを、スーパーアクションコントローラーとして実行することができます。
~
グローバルアクションコントローラーは、グローバルアクションの動作を制御するアクションコントローラークラスです。
スーパーアクションコントローラーと同様、アクションコントローラーを作成し、global.pxmlに設定を記述することで、
そのアクションコントローラーは、グローバルアクションコントローラーとして実行されます。

グローバルアクションの設定は、global.pxmlファイルが設置されたディレクトリ配下の階層全てに適用されます。
ただし、配下のディレクトリに別のglobal.pxmlファイルが存在していた場合、そのディレクトリ以下の設定は、
下の階層にあるglobal.pxmlファイルのもので上書かれます。

&br;

* アクションコントローラー
アクションコントローラーは、アクションの動作を制御するコントローラーです。
任意でアクションを実装する場合、ユーザーが作成するコントローラーが、このアクションコントローラーです。

&br;

* Ajaxコントローラー
xFrameworkPXでJavaScriptコードを送信する場合に使用するコントローラーです。

&br;

* ExtDirectコントローラー
Ext JSのExt.Direct機能を使用するためのコントローラーです。

&br;

* コンポーネント

コンポーネントとは、コントローラーの機能を拡張するためのクラスライブラリです。
コントローラーにコンポーネントを使用するための設定を記述すると、
コンポーネントのインスタンスはコントローラークラスのプロパティのように振る舞うので、
コントローラー内で簡単にコンポーネントのメソッドをコールすることができます。
~
コンポーネントには、''ユーザーコンポーネント''と''ビルトインコンポーネント''の二種類があります。
ユーザーコンポーネントとは、ユーザー自身が作成したコンポーネントのことを指し、
ビルトインコンポーネントとは、xFrameworkPXが標準で提供しているコンポーネントのことを指します。
~
ビルトインコンポーネントには以下のものがあります。

|~コンポーネント名|~説明|
|Mail|メールを送信するためのコンポーネント|
|PhpSession|PHPによるセッションを使用するためのコンポーネント|
|WiseTag|WiseTagの機能を提供するコンポーネント|
|RapidDrive|RapidDriveに必要なコントローラーの機能を拡張するコンポーネント|

これら3つのコンポーネントに関しては、自動的に使用するための定義がされるため、ユーザーが使用するための定義を記述する必要はありません。
