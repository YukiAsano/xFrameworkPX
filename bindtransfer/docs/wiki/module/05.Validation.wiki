* バリデーション
バリデーションの使用方法について説明します。


* 設定方法
入力チェックを行うバリデーションは、モジュールクラスのvalidatorsプロパティで設定します。

validatorsプロパティに指定する配列の形式は以下の通りになります。

{{{
// ひとつのバリデーションを指定する場合
array(
    'フィールド名' => array(
        'rule' => 'バリデーション名',
        'message' => 'エラーメッセージ'
    )
)

// 同じフィールドに複数指定する場合
array(
    'フィールド名' => array(
        array(
            'rule' => 'バリデーション名1',
            'message' => 'エラーメッセージ1'
            'option' => array(
                'オプション名' => 値
            )
        ),
        array(
            'rule' => 'バリデーション名2',
            'message' => 'エラーメッセージ2'
        )
    )
)
}}}

** フィールド名
ここには入力チェックを行いたい入力フィールドの名前を指定します。

** バリデーション名
そのフィールドに対して適用したい入力チェックの名前を指定します。
ビルトインバリデーションを使用する場合はバリデーション名を直接指定し、
ユーザバリデーションを使用する場合は、バリデーション処理を定義したメソッド名を指定します。

&br;

*** ビルトインバリデーション
以下はビルトインバリデーションの一覧になります。
|~バリデーション名|>|~概要|
|Alpha|>|半角英字チェック|
|AlphaNumeric|>|半角英数字チェック|
|BgColor|>|bgcolorコードチェック（HTMLやCSS等で使用するカラーコードの書式をチェック）|
|Date|>|日付チェック|
|Email|>|メールアドレスチェック|
|Hankaku|>|半角文字チェック（記号、半角スペースを含む半角英数）|
|HankakuKana|>|半角カナチェック|
|NotEmpty|>|空文字チェック|
|Number|>|数字チェック|
|Phone|>|電話番号チェック|
|^|>|~オプション|
|^|mobile|true(既定値)：固定電話と携帯電話、両方の番号チェックを行います。&br;false：固定電話の番号チェックのみ行います。|
|TextLength|>|文字数チェック|
|^|>|~オプション|
|^|maxlength|入力された文字列の最大文字数を指定します。|
|^|minlength|入力された文字列の最小文字数を指定します。|
|Url|>|>|URL文字列チェック|
|Zenkaku|>|全角チェック|
|ZenkakuHira|>|ひらがなチェック|
|ZenkakuKana|>|全角カナチェック|
|ZenkakuNum|>|全角数字チェック|

空文字チェック以外のバリデーションでは、空文字チェックは行っていません。
他のチェックで空文字も判定したい場合は注意してください。

&br;

*** ユーザーバリデーション
ユーザーバリデーションは、Moduleクラス内に「''validate''」で始まる名前のメソッドを定義するか、
ビヘイビアクラスを作成して、そのなかに「''bindValidate''」で始まる名前のメソッドを定義してください。
作成したメソッドは実行時、第一引数にチェックする値が渡され、第二引数にはoptionのデータが渡されます。
戻り値は、bool値を返すようにしてください。入力チェックエラー時にfalseを返すことで、xFrameworkPXに入力エラーを通知できます。
これにより、ユーザーはエラーメッセージ等を取得できるようになります。


記述例
{{{

/**
 * モジュールクラス内に定義する場合
 */
public function validateSample($target)
{
    return true;
}

/**
 * ビヘイビアクラス内に定義する場合
 * optionの設定値を受け取る
 */
public function bindValidateSample($target, $option)
{
    return false;
}

// どちらも設定するバリデーション名はvalidSampleになります。
}}}

** オプション設定
バリデーションの中には、オプションによって値を渡すことで動作を変更できるものがあります。
オプションは連想配列を使って渡します。

&br;

** エラーメッセージ
入力チェックが通らなかった場合に表示するエラーメッセージを指定します。

&br;

** バリデーションの複数指定
上記の記述方法にもあるように、ruleの指定とmessageの指定を更に配列にして複数指定することで、
一つのフィールドに対して複数の入力チェックをかけることができます。
複数の入力チェックを指定した場合、入力チェックは配列の先頭から順番に実行されます。

* 入力チェックの実行方法
入力チェックはModuleクラスの「''validation''」メソッドまたは「''isValid''」メソッドを実行して行います。

** validationメソッド
validationメソッドは複数のモジュールに対して同一のチェックデータを引き渡したい場合に使用するメソッドです。
validationメソッドには、引数としてプロパティに実行するモジュールクラスと同名の配列プロパティを持ったMixedCollectionオブジェクトを渡します。
このオブジェクトのモジュールクラスと同名のプロパティにはフィールド名をキーに、そのフィールドに対する入力値が要素として設定されてた連想配列が設定されている必要があります。
{{{
// 引数として渡すオブジェクトのイメージ
MixedCollection::exampleModule = array(
    'フィールド1' => '入力値1',
    'フィールド2' => '入力値2',
    'フィールド3' => '入力値3'
);
}}}

validationメソッドの戻り値は、入力チェックがエラーだったフィールド毎のエラーメッセージと、
そのときの入力値を要素に持つ、MixedCollectionオブジェクトになります。

{{{
// 戻り値のオブジェクトのイメージ
MixedCollection::exampleModule = array(
    'フィールド1' => MixedCollection::array(
        'messages' => array('エラーメッセージ1'),
        'target' => '入力値1'
    ),
    'フィールド3' => MixedCollection::array(
        'messages' => array(
            'エラーメッセージ3-2'
        ),
        'target' => '入力値3'
    );
);
}}}

入力チェックの具体的な使用例については、チュートリアルにある「バリデーション」の項を参照してください。

&br;

** isValidメソッド
isValidメソッドは、チェックしたいデータだけを指定して入力チェックを行う場合に使用します。
引数に渡すデータは、validationメソッドを使用するときのように、MixedCollectionのオブジェクトである必要はなく、
'''array('フィールド名' => '入力値')'''の形式の連想配列を引数に渡して実行すれば、そのデータに対して入力チェックが実行されます。
~
戻り値はvalidationメソッドと同じ形式のMixedCollectionオブジェクトが返ってきます。

&br;

----
